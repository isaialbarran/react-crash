{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/layout/Header.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","padding","textDecoration","_this","props","todo","completed","_this$props$todo","this","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","background","color","border","float","borderRadius","Todos","todos","map","components_TodoItem","key","AddTodo","state","e","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","headerStyle","textAlign","linkStyle","Header","Link","to","About","App","axios","delete","concat","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","layout_Header","Route","exact","path","render","Fragment","components_AddTodo","components_Todos","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.71caca47.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n    getStyle = () => {\n        return {\n            padding: '10px',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    };\n    /*\n    Si onChange={this.markComplete} se llama como una función normal, da fallo\n    porque this.props hace referencia a Component y no a props de Todos\n    Se soluciona this.markComplete.bind(this)\n    markComplete(e){\n        console.log(this.props);\n    }\n    */\n\n    render() {\n        const {id,title} = this.props.todo;\n        return (\n            //Creamos una función para darle estilos de forma dinámica\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>{' '}\n                    {title}</p>\n                <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>x</button>\n            </div>\n        );\n    }\n}\nconst btnStyle = {\n    background : 'red',\n    color:'white',\n    border: 'none',\n    float:'right',\n    borderRadius:'50%',\n    padding: '5px 9px'\n};\n//PropTypes\nTodoItem.propTypes = {\n    todo : PropTypes.object.isRequired,\n    markComplete : PropTypes.func.isRequired,\n    delTodo : PropTypes.func.isRequired\n};\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from 'prop-types';\n\nclass Todos extends Component {\n\n    render() {\n        return this.props.todos.map((todo)=>(\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\n            delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n//PropTypes\nTodos.propTypes = {\n    todos : PropTypes.array.isRequired,\n    markComplete : PropTypes.func.isRequired,\n    delTodo : PropTypes.func.isRequired\n};\nexport default Todos;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTodo extends Component {\n\n    state = {\n        title:''\n    };\n\n    onChange = (e) => { this.setState({ [e.target.name] : e.target.value }) };\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title: ''});\n    };\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{display : 'flex'}}>\n                <input\n                    style={{flex : '10', padding:'5px'}}\n                    type=\"text\"\n                    name=\"title\"\n                    placeholder=\"Add todo....\"\n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <input type=\"submit\"\n                       value=\"Submit\"\n                       className=\"btn\"\n                       style={{flex : '1'}}\n                />\n            </form>\n        );\n    }\n}\n\n//PropTypes\nAddTodo.propTypes = {\n    addTodo : PropTypes.func.isRequired,\n};\n\nexport default AddTodo;","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n            <Link style={linkStyle} to=\"/\"> Home </Link> |\n            <Link style={linkStyle} to=\"/About\"> About </Link>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: 'black',\n    color:'white',\n    textAlign : 'center',\n    padding : '10px'\n};\nconst linkStyle = {\n    color: '#fff',\n    textDecoration : 'none'\n};\n\nexport default Header;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nfunction About() {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This is the TodoList app v1.0.</p>\n        </div>\n    )\n}\n\nAbout.propTypes = {};\n\nexport default About;","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport axios from 'axios';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\n// import uuid from 'uuid';\n\nclass App extends Component {\n    state = {\n        todos: []\n    };\n\n    componentDidMount() {\n        axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({ todos:res.data }));\n    }\n\n    //Toggle Complete\n    markComplete = (id) => {\n        this.setState({todos:this.state.todos.map(todo => {\n            if(todo.id === id){\n                todo.completed = !todo.completed\n            }\n            return todo;\n            })})\n    };\n\n    //Delete Todo\n    delTodo = (id) => {\n        axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n            .then(res =>  this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id )]}));\n    };\n\n    //Add Todo\n    addTodo = (title) => {\n        axios.post('https://jsonplaceholder.typicode.com/todos',{\n           title,\n            completed: false\n        })\n        .then(res => this.setState({ todos:[...this.state.todos, res.data]}));\n\n    };\n    render() {\n        return (\n            <Router>\n                <div className = \"App\" >\n                    <div className=\"container\">\n                        <Header/>\n                        <Route exact path=\"/\" render={props => (\n                            <React.Fragment>\n                                <AddTodo addTodo={this.addTodo}/>\n                                <Todos todos = {this.state.todos} markComplete={this.markComplete}\n                                delTodo={this.delTodo}/>\n                            </React.Fragment>\n                            )} />\n                        <Route path=\"/about\" component={About}/>\n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}